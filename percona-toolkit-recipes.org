#+LaTeX_CLASS: beamer
#+MACRO: BEAMERMODE presentation
#+MACRO: BEAMERTHEME boxes
#+MACRO: BEAMERCOLORTHEME lily
#+MACRO: BEAMERSUBJECT RMRF
#+MACRO: BEAMERINSTITUTE Percona Inc., Square Inc.
#+TITLE: Percona Toolkit Recipes
#+AUTHOR: Marcos Albe, Fernando Ipar, Ryan Lowe
#+OPTIONS: ^:nil

# Some comments and/or 'presenter notes' included. The slides are
# intentionally minimal as this will be focused on short demos for
# every recipe instead

* Introduction

** About us
- Marcus Albe - Support Engineer @Percona
- Fernando Ipar - Senior Consultant @Percona
- Ryan Lowe - Production Engineer @Square

** Presentation Overview

- What is Percona Toolkit & Why should you be here?
- Classes of problems solved by Percona Toolkit
- Targeted recipes for specific problems
- Further resources & Recommended reading
- Q&A

** What is Percona Toolkit?

Percona Toolkit is a collection of advanced command-line tools to perform a variety of MySQL and system tasks that are too tedious and/or complex to perform manually.

# Can do a quick poll here to see who uses it, who *wants* to use it, etc...

** Why should you be here?

Don't re-invent the wheel

# Most of us have a very large collection of scripts that we've created over the years, right?
# How many of you have unit tests for those scripts?
# How many of you have validated that those scripts work in 4.1, 5.0, 5.1, 5.5, Percona-Server, MariaDB, and Drizzle?
# How many of you have tens-of-thousands of implementations of those scripts to catch undocumented edge-cases?
# How many of you have a full time team of developers working on those scripts?
# Right. This is why you should be here.  Make your life easier and re-use existing tools.

* Problems

- Replication
- Performance
- Upgrading
- Troubleshooting
- Schema Changes
# - Workload Changes <- not sure what this is, or if we'll have time
# for the pt-archive demo. removing from now. 

# Percona Toolkit helps to solve a wide variety of problems that MySQL DBAs encounter
# on a regular basis.  The problems include Replication issues, Performance problems,
# Upgrade safety, Troubleshooting and investigationg hard-to-diagnose problems, and
# Schema changes for very large tables. This isn't an exhaustive list, but we only
# have 45 minutes, so this is what we'll cover today
* Recipes
** Replication
** Problem 1: Master and Slave MAY have different data

- Statements unsafe for replication (CURRENT_USER(), etc)
- Incorrect failover procedures
- Developers writing directly to the slave
- Rolling upgrades
- Storage Engines
- Temporary Tables
- Replication Filters

** Solution 1: pt-table-checksum

Recipe demo: how to verify a three node setup
# TODO: short demo. 

** Problem 2: Master and Slave DO have different data

Same reasons as Problem 1, but validated via Solution 1

** Solution 2: pt-table-sync

Recipe demo: resyncing
# TODO: Mention gotchas (like impossibility to throttle the process)
# TODO: short demo

** Problem 3: SQL Injection + Long Restore Times
** Solution 3: pt-slave-delay

# TODO: short demo

** Problem 4: Slow Queries

Amdahl's Law 

# The performance enhancement possible with a given improvement is
# limited by the fraction of the execution time that the improved
# feature is used. 

** Solution 4: pt-query-digest

Recipe: Analyzing a query log looking for candidates for performance optimization
# TODO: demo

** Problem 5: Rapid Development & Constantly Changing Workload

** Solution 5: pt-query-digest
#+CAPTION: Sample query ranking from a pt-query-digest report
[[./img/pt-query-digest-ranking.png]]
** Solution 5: pt-query-digest
#+CAPTION: Sample query detail from a pt-query-digest report
[[./img/pt-query-digest-zoom-on-query.png]]
** Upgrading

** Problem 6: Upgrading MySQL can break my app

** Solution 6: pt-upgrade

2 ways to upgrade MySQL:
- Reckless
- Safe
- http://bit.ly/upgrading-mysql
# TODO: slides presenting highlights from a report

** Troubleshooting

** Problem 7: Root Cause Analysis

** Solution 7: pt-stalk & pt-sift
# TODO: Generate problem cases so we can create slides with good
# capture data

** Problem 8: Intermittent non-repeatable problems

** Solution 8: pt-stalk, pt-sift

Why?

"Everything freezes at random times"
** pt-stalk : triggered captures
Triggers based on 
- show global status
- show full processlist
- user defined function
** pt-stalk : trigger examples
pt-stalk --function processlist --variable Command --match Sleep
--threshold 155 --cycles 0
# Trigger if we're using a thread pool and more threads are connected
# and sleeping than the size of the pol plus some room for a few
# direct connections. 
** pt-stalk : trigger examples
pt-stalk --threshold 40 --cycles 6
# Trigger if more than 40 threads are running for more than 5
# consecutive checks
** pt-stalk : trigger examples
pt-stalk --function check_loadavg.sh --threshold 12
# triggers if load avg for the last minute is more than 12.x for 5
# consecutive checks or more
** pt-stalk : function trigger example
function trg_plugin() 

{

   uptime |sed 's/.*load average: //g;s/\..*//g'

}
** pt-stalk : making sense of a capture
Now ... Where do we start?

pt-sift!
** pt-sift
#+CAPTION: Sample pt-sift summary
[[./img/pt-sift.png]]

** Problem 9: Blocking ALTER Statements

** Solution 9: pt-online-alter-table
# TODO: short demo

* Resources
** Resources
http://bit.ly/pt-recipes
* Q&A

